---
// Mock language data - in a real app, this would be driven by i18n framework
const languages = [
  { code: 'id', name: 'Indonesia' },
  { code: 'es', name: 'Sunda' },
  { code: 'fr', name: 'Jawa Jawa' },
];
const currentLanguage = 'id';
---

<div class="relative inline-block text-left">
  <button 
    type="button" 
    id="language-menu-button" 
    class="inline-flex justify-center items-center w-full rounded-md border border-gray-200 shadow-sm px-3 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <span class="mr-1">{languages.find(lang => lang.code === currentLanguage)?.name}</span>
    <svg class="-mr-1 ml-1 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </button>

  <div 
    id="language-menu" 
    class="hidden origin-top-right absolute right-0 mt-2 w-40 rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-50"
    role="menu" 
    aria-orientation="vertical" 
    aria-labelledby="language-menu-button"
  >
    <div class="py-1" role="none">
      {languages.map(language => (
        <a 
          href="#" 
          class={`block px-4 py-2 text-sm ${language.code === currentLanguage ? 'bg-gray-100 text-primary-600' : 'text-gray-700 hover:bg-gray-50'}`}
          role="menuitem"
          data-lang-code={language.code}
        >
          {language.name}
        </a>
      ))}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const languageMenuButton = document.getElementById('language-menu-button');
    const languageMenu = document.getElementById('language-menu');
    
    languageMenuButton?.addEventListener('click', () => {
      languageMenu?.classList.toggle('hidden');
    });
    
    // Close the menu when clicking outside
    document.addEventListener('click', (event) => {
      if (!languageMenuButton?.contains(event.target as Node) && 
          !languageMenu?.contains(event.target as Node)) {
        languageMenu?.classList.add('hidden');
      }
    });
    
    // Handle language selection
    document.querySelectorAll('[data-lang-code]').forEach(item => {
      item.addEventListener('click', (e) => {
        e.preventDefault();
        // In a real application, you would implement language switching logic here
        console.log('Language selected:', (item as HTMLElement).dataset.langCode);
        languageMenu?.classList.add('hidden');
      });
    });
  });
</script>
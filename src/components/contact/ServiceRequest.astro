---
const serviceCategories = [
  { value: "", label: "Select a service category" },
  { value: "infrastructure", label: "Infrastructure & Maintenance" },
  { value: "permits", label: "Permits & Licenses" },
  { value: "sanitation", label: "Sanitation & Waste" },
  { value: "public-safety", label: "Public Safety" },
  { value: "transportation", label: "Transportation" },
  { value: "utilities", label: "Utilities" },
  { value: "other", label: "Other" }
];

const serviceTypes = {
  "infrastructure": [
    { value: "pothole", label: "Pothole Repair" },
    { value: "streetlight", label: "Streetlight Outage" },
    { value: "sidewalk", label: "Sidewalk Damage" },
    { value: "road", label: "Road Maintenance" }
  ],
  "permits": [
    { value: "building", label: "Building Permit" },
    { value: "business", label: "Business License" },
    { value: "event", label: "Event Permit" },
    { value: "parking", label: "Parking Permit" }
  ],
  "sanitation": [
    { value: "missed-collection", label: "Missed Collection" },
    { value: "illegal-dumping", label: "Illegal Dumping" },
    { value: "bin-replacement", label: "Bin Replacement" },
    { value: "recycling", label: "Recycling Inquiry" }
  ],
  "public-safety": [
    { value: "traffic", label: "Traffic Concern" },
    { value: "noise", label: "Noise Complaint" },
    { value: "vandalism", label: "Vandalism Report" },
    { value: "suspicious", label: "Suspicious Activity" }
  ],
  "transportation": [
    { value: "bus-shelter", label: "Bus Shelter Maintenance" },
    { value: "traffic-signal", label: "Traffic Signal Issue" },
    { value: "transit-schedule", label: "Transit Schedule Inquiry" },
    { value: "bike-lane", label: "Bike Lane Maintenance" }
  ],
  "utilities": [
    { value: "water", label: "Water Service" },
    { value: "sewer", label: "Sewer Issue" },
    { value: "power", label: "Power Outage" },
    { value: "internet", label: "Public Internet Access" }
  ],
  "other": [
    { value: "general", label: "General Request" }
  ]
};
---

<div class="bg-white rounded-xl shadow-md overflow-hidden">
  <form id="service-request-form" class="p-6">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
      <!-- Service Category -->
      <div>
        <label for="service-category" class="block text-sm font-medium text-gray-700 mb-1">Service Category</label>
        <select 
          id="service-category" 
          name="service-category" 
          class="w-full rounded-md border-gray-300 border py-2 px-4 focus:border-primary-500 focus:ring focus:ring-primary-500 focus:ring-opacity-50"
          required
        >
          {serviceCategories.map(category => (
            <option value={category.value}>{category.label}</option>
          ))}
        </select>
      </div>
      
      <!-- Service Type (dynamically populated) -->
      <div>
        <label for="service-type" class="block text-sm font-medium text-gray-700 mb-1">Service Type</label>
        <select 
          id="service-type" 
          name="service-type" 
          class="w-full rounded-md border-gray-300 border py-2 px-4 focus:border-primary-500 focus:ring focus:ring-primary-500 focus:ring-opacity-50"
          required
          disabled
        >
          <option value="">Select a category first</option>
        </select>
      </div>
    </div>
    
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
      <!-- Location -->
      <div>
        <label for="location" class="block text-sm font-medium text-gray-700 mb-1">Location</label>
        <input 
          type="text" 
          id="location" 
          name="location" 
          placeholder="Street address or intersection"
          class="w-full rounded-md border-gray-300 border py-2 px-4 focus:border-primary-500 focus:ring focus:ring-primary-500 focus:ring-opacity-50"
          required
        />
      </div>
      
      <!-- Priority -->
      <div>
        <label for="priority" class="block text-sm font-medium text-gray-700 mb-1">Priority</label>
        <select 
          id="priority" 
          name="priority" 
          class="w-full rounded-md border-gray-300 border py-2 px-4 focus:border-primary-500 focus:ring focus:ring-primary-500 focus:ring-opacity-50"
          required
        >
          <option value="">Select priority level</option>
          <option value="low">Low - No immediate hazard</option>
          <option value="medium">Medium - Needs attention soon</option>
          <option value="high">High - Potential hazard</option>
          <option value="urgent">Urgent - Immediate hazard</option>
        </select>
      </div>
    </div>
    
    <!-- Description -->
    <div class="mb-6">
      <label for="description" class="block text-sm font-medium text-gray-700 mb-1">Description</label>
      <textarea 
        id="description" 
        name="description" 
        rows="4" 
        class="w-full rounded-md border-gray-300 border py-2 px-4 focus:border-primary-500 focus:ring focus:ring-primary-500 focus:ring-opacity-50"
        placeholder="Please provide details about the service request..."
        required
      ></textarea>
    </div>
    
    <!-- Photos -->
    <div class="mb-6">
      <label for="photos" class="block text-sm font-medium text-gray-700 mb-1">Photos (Optional)</label>
      <input 
        type="file" 
        id="photos" 
        name="photos" 
        accept="image/*" 
        multiple
        class="w-full text-gray-700 rounded-md border-gray-300 border py-2 px-4 focus:border-primary-500 focus:ring focus:ring-primary-500 focus:ring-opacity-50"
      />
      <p class="text-xs text-gray-500 mt-1">Upload up to 3 photos (Max: 5MB each)</p>
    </div>
    
    <!-- Contact Information -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
      <!-- Name -->
      <div>
        <label for="requestor-name" class="block text-sm font-medium text-gray-700 mb-1">Your Name</label>
        <input 
          type="text" 
          id="requestor-name" 
          name="requestor-name" 
          class="w-full rounded-md border-gray-300 border py-2 px-4 focus:border-primary-500 focus:ring focus:ring-primary-500 focus:ring-opacity-50"
          required
        />
      </div>
      
      <!-- Contact Method -->
      <div>
        <label for="contact-method" class="block text-sm font-medium text-gray-700 mb-1">Preferred Contact Method</label>
        <select 
          id="contact-method" 
          name="contact-method" 
          class="w-full rounded-md border-gray-300 border py-2 px-4 focus:border-primary-500 focus:ring focus:ring-primary-500 focus:ring-opacity-50"
          required
        >
          <option value="">Select contact method</option>
          <option value="email">Email</option>
          <option value="phone">Phone</option>
          <option value="sms">SMS</option>
        </select>
      </div>
    </div>
    
    <!-- Contact Details -->
    <div class="mb-6">
      <label for="contact-details" class="block text-sm font-medium text-gray-700 mb-1">Contact Details</label>
      <input 
        type="text" 
        id="contact-details" 
        name="contact-details" 
        placeholder="Email address or phone number"
        class="w-full rounded-md border-gray-300 border py-2 px-4 focus:border-primary-500 focus:ring focus:ring-primary-500 focus:ring-opacity-50"
        required
      />
    </div>
    
    <!-- Terms Agreement -->
    <div class="mb-6">
      <label class="flex items-start">
        <input 
          type="checkbox" 
          name="terms-agreement" 
          class="mt-1 rounded text-primary-600 focus:ring-primary-500"
          required
        />
        <span class="ml-2 text-sm text-gray-700">
          I confirm this information is accurate and agree to be contacted regarding this service request.
        </span>
      </label>
    </div>
    
    <!-- Submit Button -->
    <div class="text-right">
      <button 
        type="submit" 
        class="inline-flex justify-center items-center px-6 py-3 bg-primary-600 text-white font-medium rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 transition-colors duration-200"
      >
        Submit Request
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
        </svg>
      </button>
    </div>
  </form>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Define the service types (same as in the Astro component)
    const serviceTypes = {
      "infrastructure": [
        { value: "pothole", label: "Pothole Repair" },
        { value: "streetlight", label: "Streetlight Outage" },
        { value: "sidewalk", label: "Sidewalk Damage" },
        { value: "road", label: "Road Maintenance" }
      ],
      "permits": [
        { value: "building", label: "Building Permit" },
        { value: "business", label: "Business License" },
        { value: "event", label: "Event Permit" },
        { value: "parking", label: "Parking Permit" }
      ],
      "sanitation": [
        { value: "missed-collection", label: "Missed Collection" },
        { value: "illegal-dumping", label: "Illegal Dumping" },
        { value: "bin-replacement", label: "Bin Replacement" },
        { value: "recycling", label: "Recycling Inquiry" }
      ],
      "public-safety": [
        { value: "traffic", label: "Traffic Concern" },
        { value: "noise", label: "Noise Complaint" },
        { value: "vandalism", label: "Vandalism Report" },
        { value: "suspicious", label: "Suspicious Activity" }
      ],
      "transportation": [
        { value: "bus-shelter", label: "Bus Shelter Maintenance" },
        { value: "traffic-signal", label: "Traffic Signal Issue" },
        { value: "transit-schedule", label: "Transit Schedule Inquiry" },
        { value: "bike-lane", label: "Bike Lane Maintenance" }
      ],
      "utilities": [
        { value: "water", label: "Water Service" },
        { value: "sewer", label: "Sewer Issue" },
        { value: "power", label: "Power Outage" },
        { value: "internet", label: "Public Internet Access" }
      ],
      "other": [
        { value: "general", label: "General Request" }
      ]
    };
    
    const categorySelect = document.getElementById('service-category') as HTMLSelectElement;
    const typeSelect = document.getElementById('service-type') as HTMLSelectElement;
    const serviceRequestForm = document.getElementById('service-request-form');
    
    if (!categorySelect || !typeSelect) return;
    
    // Update service types when category changes
    categorySelect.addEventListener('change', () => {
      const selectedCategory = categorySelect.value;
      
      // Clear existing options
      typeSelect.innerHTML = '';
      
      // Disable if no category selected
      if (!selectedCategory) {
        typeSelect.setAttribute('disabled', 'disabled');
        typeSelect.innerHTML = '<option value="">Select a category first</option>';
        return;
      }
      
      // Enable and populate with new options
      typeSelect.removeAttribute('disabled');
      
      // Add default option
      const defaultOption = document.createElement('option');
      defaultOption.value = '';
      defaultOption.textContent = 'Select a service type';
      typeSelect.appendChild(defaultOption);
      
      // Add options for the selected category
      const options = serviceTypes[selectedCategory as keyof typeof serviceTypes] || [];
      options.forEach(option => {
        const optionElement = document.createElement('option');
        optionElement.value = option.value;
        optionElement.textContent = option.label;
        typeSelect.appendChild(optionElement);
      });
    });
    
    // Handle form submission
    serviceRequestForm?.addEventListener('submit', (e) => {
      e.preventDefault();
      
      // In a real implementation, you would send the form data to the server here
      
      // Simulate form submission
      const submitButton = serviceRequestForm.querySelector('button[type="submit"]');
      if (submitButton) {
        submitButton.disabled = true;
        submitButton.innerHTML = `
          <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
          </svg>
          Processing...
        `;
      }
      
      // Simulate a successful response after 2 seconds
      setTimeout(() => {
        // Create a success message
        const successMessage = document.createElement('div');
        successMessage.className = 'bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-6';
        successMessage.innerHTML = `
          <div class="flex">
            <div class="flex-shrink-0">
              <svg class="h-5 w-5 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
            </div>
            <div class="ml-3">
              <p class="text-sm font-medium">
                Your service request has been submitted successfully! <br>
                Reference Number: <span class="font-bold">SR-${Math.floor(Math.random() * 10000).toString().padStart(4, '0')}</span>
              </p>
            </div>
          </div>
        `;
        
        // Insert the success message before the form
        serviceRequestForm.parentNode?.insertBefore(successMessage, serviceRequestForm);
        
        // Reset the form
        serviceRequestForm.reset();
        
        // Reset the button
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.innerHTML = `
            Submit Request
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          `;
        }
        
        // Disable the service type select again
        typeSelect.setAttribute('disabled', 'disabled');
        typeSelect.innerHTML = '<option value="">Select a category first</option>';
        
        // Remove the success message after 5 seconds
        setTimeout(() => {
          successMessage.remove();
        }, 5000);
      }, 2000);
    });
  });
</script>